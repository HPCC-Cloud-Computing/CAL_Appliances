from __future__ import absolute_import
import django
import json
from django.contrib import messages
from django.contrib.auth.decorators import login_required, permission_required
from django.shortcuts import render
from django.core import serializers
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import ensure_csrf_cookie
from mcos.apps.authentication.decorators import api_login_required
from .models import SystemCluster, ObjectServiceInfo
from .forms import ConnectToSystemForm, NewClusterDataForm

from mcos.wsgi import SYSTEM_INFO


class SendNewClusterInfoError(Exception):
    pass


@api_login_required()
@permission_required('authentication.admin_role', raise_exception=True)
def get_cluster_list(request):
    if request.method == 'GET':
        cluster_list = []
        cluster_data_list = Systemcluster.objects.all()
        for cluster_info in cluster_data_list:
            cluster_info_dict = {
                'id': str(cluster_info.id),
                'name': cluster_info.name,
                'status': cluster_info.status,
                'service_info': {
                    'service_type': ObjectServiceInfo.convert_sv_type_id(
                        cluster_info.service_info.service_type),
                    'specifications':
                        cluster_info.service_info.specifications,
                    'auth_info':
                        cluster_info.service_info.auth_info,
                    'distance_info':
                        cluster_info.service_info.distance_info
                }
            }
            cluster_list.append(cluster_info_dict)
        return HttpResponse(json.dumps(cluster_list),
                            content_type="application/json")


def login_cluster(session, cluster_url, user_name, password):
    try:
        login_url = cluster_url + "auth/api_login/"
        session.get(login_url)
        csrftoken = session.cookies['csrftoken']
        login_resp = session.post(login_url,
                                  data={'csrfmiddlewaretoken': csrftoken,
                                        'user_name_email': user_name,
                                        'password': password},
                                  timeout=20)
        # check if login is success or not

        if login_resp.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        return False


def gain_add_cluster_perm_from_cluster(cluster_id, cluster_access_info):
    session = requests.Session()
    cluster_url = "http://" + cluster_access_info['ip'] + ":" + \
                  cluster_access_info["port"] + "/"
    is_login = login_cluster(session, cluster_url, 'admin', 'bkcloud')
    if is_login:
        try:
            gain_add_cluster_perm_url = \
                cluster_url + "admin/system/gain_add_cluster_permission/"
            session.get(gain_add_cluster_perm_url)
            csrftoken = session.cookies['csrftoken']
            r = session.post(
                gain_add_cluster_perm_url,
                data={
                    'csrfmiddlewaretoken': csrftoken,
                    'request_cluster_id': SYSTEM_INFO['current_cluster_id']
                },
                timeout=105
            )
            status_code = r.status_code
            if status_code == 200:
                pass
            else:
                pass
        except Exception as e:
            return "error", "Fail to check permisison" \
                            "from cluster " + str(cluster_id)
    else:
        return "error", "Cannot login to cluster " + str(cluster_id)
    session.close()


# function used to gain all access from all another clusters in system
def gain_add_cluster_perms():
    cluster_list = SystemCluster.objects.all()
    for cluster in cluster_list:
        if cluster.id != SYSTEM_INFO['current_cluster_id']:
            cluster_access_info = {
                'ip': cluster.address_ip,
                'port': cluster.address_port
            }
            cluster_perm, message = gain_add_cluster_perm_from_cluster(
                cluster.id,
                cluster_access_info
            )
            if cluster_perm == 'accept':
                pass
            elif cluster_perm == 'reject':
                pass
            elif cluster_perm == 'wait':
                pass
            elif cluster_perm == 'error':
                pass

    return True

@api_login_required()
@permission_required('authentication.admin_role', raise_exception=True)
@ensure_csrf_cookie
def gain_add_cluster_permission(request):
    if request.method == "GET":
        return JsonResponse({'accept_connect': 'true'})
    if request.method == "POST":
        return JsonResponse({'accept_connect':false})

@api_login_required()
@permission_required('authentication.admin_role', raise_exception=True)
@ensure_csrf_cookie
def connect_to_system(request):
    if SYSTEM_INFO['connect_to_system_lock']:
        return JsonResponse({'accept_connect': 'false',
                             'reason': 'System is busy, '
                                       'please try again later'},
                            status=400)
    if request.method == "GET":
        return JsonResponse({'accept_connect': 'true'})
    if request.method == "POST":
        SYSTEM_INFO['connect_to_system_lock'] = True
        system_form = ConnectToSystemForm(request.POST)
        if system_form.is_valid():
            # check connection to another cluster in system
            # if all connection is alive, accept cluster
            new_cluster_id = system_form.cleaned_data['cluster_id']
            new_cluster_name = system_form.cleaned_data['cluster_name']
            new_cluster_address = system_form.cleaned_data['cluster_address']
            new_cluster_info = system_form.cleaned_data['cluster_info']
            # lock current cluster
            # try to gain access from all another cluster

            is_gain_access = True
            if is_gain_access:
                # do add new node to system
                # return system node list to request cluster
                pass
            else:
                # return fail to connect to system
                # and tell request cluster try again later
                pass
            # send new cluster information to another cluster
            # return to new cluster
            cluster_list = SystemCluster.objects.all()
            try:
                for cluster in cluster_list:
                    send_new_cluster_info(cluster, new_cluster_name,
                                          new_cluster_address)
            except SendNewClusterInfoError:
                pass
            # if no error has occur, add new_cluster to cluster list
            new_cluster = SystemCluster(name=new_cluster_name,
                                        address=new_cluster_address)
            new_cluster.save()

            return JsonResponse({'is_connected_to_system': 'true'})
        else:
            return JsonResponse({'error': 'invalid cluster data format.'},
                                status=400)


@api_login_required()
@permission_required('authentication.admin_role', raise_exception=True)
@ensure_csrf_cookie
def gain_add_cluster_permission(request):
    if request.method == "POST":
        if SYSTEM_INFO['connect_to_system_lock']:
            return JsonResponse(
                {'accept_connect': 'false',
                 'reason': 'System is busy, please try again later'},
                status=403)
    if request.method == "GET":
        return JsonResponse({'accept_connect': 'true'})
    if request.method == "POST":
        SYSTEM_INFO['connect_to_system_lock'] = True
        system_form = ConnectToSystemForm(request.POST)
        if system_form.is_valid():
            # check connection to another cluster in system
            # if all connection is alive, accept cluster
            new_cluster_id = system_form.cleaned_data['cluster_id']
            new_cluster_name = system_form.cleaned_data['cluster_name']
            new_cluster_address = system_form.cleaned_data['cluster_address']
            new_cluster_info = system_form.cleaned_data['cluster_info']
            # lock current cluster
            # try to gain access from all another cluster

            is_gain_access = True
            if is_gain_access:
                # do add new node to system
                # return system node list to request cluster
                pass
            else:
                # return fail to connect to system
                # and tell request cluster try again later
                pass
            # send new cluster information to another cluster
            # return to new cluster
            cluster_list = SystemCluster.objects.all()
            try:
                for cluster in cluster_list:
                    send_new_cluster_info(cluster, new_cluster_name,
                                          new_cluster_address)
            except SendNewClusterInfoError:
                pass
            # if no error has occur, add new_cluster to cluster list
            new_cluster = SystemCluster(name=new_cluster_name,
                                        address=new_cluster_address)
            new_cluster.save()

            return JsonResponse({'is_connected_to_system': 'true'})
        else:
            return JsonResponse({'error': 'invalid cluster data format.'})


@api_login_required()
@permission_required('authentication.admin_role', raise_exception=True)
def check_health(request):
    if request.method == 'GET':
        return JsonResponse({'current_status': 'active'})

#
# @api_login_required()
# @permission_required('authentication.admin_role', raise_exception=True)
# def join_new_cluster(request):
#     if request.method == "GET":
#         return JsonResponse({'accept_connect': 'true'})
#
#     if request.method == "POST":
#         system_form = ConnectToSystemForm(request.POST)
#         if system_form.is_valid():
#             # check connection to another cluster in system
#             # if all connection is alive, accept cluster
#             new_cluster_name = system_form.cleaned_data['cluster_name']
#             new_cluster_address = system_form.cleaned_data['cluster_address']
#             new_cluster = Systemcluster(name=new_cluster_name,
#                                         address=new_cluster_address)
#             new_cluster.save()
#
#             return JsonResponse({'new_cluster_joined': 'true'})
#         else:
#             return JsonResponse({'error': 'invalid cluster data format.'})


# @api_login_required()
# @permission_required('authentication.admin_role', raise_exception=True)
# @ensure_csrf_cookie
# def test_add_new_cluster(request):
#     if request.method == "GET":
#         return JsonResponse({'accept_connect': 'true'})
#
#     if request.method == "POST":
#         system_form = NewClusterDataForm(request.POST)
#         if system_form.is_valid():
#             # check connection to another cluster in system
#             # if all connection is alive, accept cluster
#             new_cluster_name = system_form.cleaned_data['cluster_name']
#             new_cluster_address = system_form.cleaned_data['cluster_address']
#             new_cluster = Systemcluster(name=new_cluster_name,
#                                         address=new_cluster_address)
#             new_cluster.save()
#
#             return JsonResponse({'new_cluster_joined': 'true'})
#         else:
#             return JsonResponse(
#                 {'error': 'invalid or duplicated cluster data.'})


# @login_required(login_url='/auth/login/')
# @permission_required('authentication.user_role', raise_exception=True)
# def test_user_role(request):
#     return render(request, 'admin_dashboard/home.html', {})


# @api_login_required()
# @permission_required('authentication.admin_role', raise_exception=True)
# def get_cluster_list_secured(request):
#     if request.method == 'GET':
#         cluster_list = []
#         cluster_data_list = SystemCluster.objects.all()
#         for cluster_info in cluster_data_list:
#             cluster_info_dict = {
#                 'id': str(cluster_info.id),
#                 'name': cluster_info.name,
#                 'status': cluster_info.status,
#                 'service_info': {
#                     'service_type':
#                         ObjectServiceInfo.convert_sv_type_id(
#                             cluster_info.service_info.service_type),
#                     'specifications':
#                         cluster_info.service_info.specifications,
#                     'auth_info':
#                         cluster_info.service_info.auth_info,
#                     'distance_info':
#                         cluster_info.service_info.distance_info
#                 }
#             }
#             cluster_list.append(cluster_info_dict)
#         return HttpResponse(json.dumps(cluster_list),
#                             content_type="application/json")


# def send_new_cluster_info(destination_cluster,
# new_cluster_name, new_cluster_address):
